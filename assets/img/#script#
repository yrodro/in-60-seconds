[black]

Let me start with a digression to properly
introduce you to the world of ideas where my
mega fav number lives.

[circularReasoning.jpg]

(5 sec pause)

Actually, circular reasoning does NOT work.

And it does not work for the obvious [*] reason
that it should have been already working, in order
for it to begin working in the first place.
[* write D'uh in center of loop]

Thus, a real life repetitive process must be
kickstarted by some different means.

[cls]
[west diesel.gif]

For instance, once started, a diesel engine
will keep itself running;

but it does need to be initially started by a
turn of the key.

[east chickenEgg.jpg]

And it is clear that the chicken and her eggs
were preceded by some other egg-laying creature.

(pause)
[cls]

logical loops are a favorite of many, if not most,
folklores.

[anotherOuroboros.jpg]

One of the most ancient, and universal motifs is
the ouroboros, a word compounded from the Greek
roots for tail and food.

It is present in Egyptian

[egyptianOuroboros.jpg]

Norse

[norseOuroboros.jpg]

medieval

[medievalOuroboros.jpg]

and American frontier mythologies

[americanOuroboros.jpg]

among many others, and has made its mark in
popular culture.

[ekans.jpg]
[rickAndMortyOuroboros.png]

(pause)

One of the most often retold anecdotes in the
history of science is the tale of August Kekulé's
discovery of the structure of the benzene molecule.

[kekuleBenzeneOuroboros.jpg]

In Kekulé's story, he had tired of working and fell
half asleep in front of the fireplace. In a dreaming
state, he saw atoms whirling about, and forming
snake-like chains. Suddenly one of the snakes bit
its own tail and danced before his eyes! In a flash
of insight, Kekulé understood that the benzene
molecule must be formed by a ring of six carbon
atoms with alternating single and double bonds.

Let me mention in passing that this tale was
very likely invented just for narrative effect.

(I do not want to be called off by people who care
for historical accuracy)

However, the story serves as the perfect
bridge to talk of a different dream-based
discovery.

[cls]

I can vouch for the veracity of this story,
because it happened to me.

I have never proved a theorem in my sleep; but
once, back in graduate school, I devised this
Basic program as I was about to wake up one
Saturday morning.

[myQuine.bas]

The program itself consists of the first 10 lines

[highlight 10-100]

while the remaining lines hold some strings of
text to be used by the program. Notice how these
strings look suspiciously like the program itself.

[highlight 110-200]

So what does this program do?

[restore code]

It first reads each string in turn, and prints it
preceded by a line number.

[highlight 20-30]

Then stores the string D-A-T-A in the variable D;

[highlight 50]

restores the data so the strings can be read a
second time,

[highlight 60]

and prints them in succession, with new line numbers
and extra formatting, using the variable D.

In brief, the program prints an exact copy of itself!

[restore code]

(pause)

Is this circular reasoning?

Almost.
But there is a subtlety that allows the
program to kickstart itself without paradoxical
behavior.

You see...
the character 34 prints a quotation mark, and I couldn't
type it directly in the code, because that would create
trouble down in the data lines, where a quotation mark
cannot be meaningfuly enclosed by a pair of quotation marks.

This is the same reason why I had to read the word 'data'
into a variable, because an instruction to write the word
directly would involve quoting the word, and those quotes
would then need to be quoted down in the data lines.

(pause)

So this is the secret of breaking the circular pattern.

Using strings with TWO different interpretations, both as
data and as instructions makes the self-reference go
away, because the instruction refers to the symbol and
not itself.

The system can kickstart itself.

(pause)

Self-replicating programs like this are called
quines, in honor of Willard Quine

[quine.jpg with name]

a central figure of 20th century logic and philosophy.

Quines can be considerably more involved than my
modest example.

Consider this baby here.

[p1.c]

This is one of the winners of the year 2000
International Obfuscated C Code Contest.

[south by Don Yang] [south-east IOCCC 2000]

Let us call it program 1.

The author took advantage of the fact that the c
language will (for the most part) ignore empty spaces.

By adding extra blanks here and there, this code
takes the form of a rectangle that frames the
Hiragana syllables 'a' and 'ku'

Upon compiling and running program 1 we get this
output

[p2.c]

Not quite the same! This time we see the empty
spaces frame the syllables 'so' and 'ku'. In any
case, this turns out to be a valid, and completely
new program (let's call it program 2), and the
temptation is just too big not to compile and run it.

It may come as no surprise that the output of
program 2

[p3.c]

is program 3; a new block of code that frames
the syllables 'sa' and 'n'.

Together, programs 1, 2, and 3 spell out

aku-soku-zan or 'swift death to evil',

[Saito.jpg]

the motto of Saitō Hajime, a character in the manga
'Samurai X'

You may be asking 'so what?'

[p3.c]

So what!!? We have yet to compile program 3.

Here is the output

[p1.c]

Looks familiar?

You have just experienced the delight of a
quine-relay;

a chain of programs that output the next in
the sequence, until the last program prints
out the first, in an ouroboros-like fashion.

(pause)

For an even more impressive example, take a look
at the repository of user Mame, another IOCCC winner.

[south-west mame]
[south https://github.com/mame]

For reasons of space I do not show you his
quine-relay, but I hope you will be properly
impressed to hear that each of the 128 outputs
is written in a different programming language.

[quine-relay.png]

(pause)
[south-east big !!!]

(pause)
[cls]

We are almost ready to start discussing my
mega fav number. The last motivational step is
to challenge your imaginations further with a puzzle
from everyone's favorite

[smullyan.jpg]

magician-turned-logician-turned-concert-pianist
Raymond Smullyan

(small pause)

Here is the deal.

The Ouroboros Society is holding its anual secret
convention.

[door.jpg]

Instead of knocking at the door, you activate the
buzzer,

[add intercom]

and a voice asks you for the password.

What you are supposed to do is input a number, and
then the guard will display a numerical answer on
the screen.

This answer will depend strictly on what you type
in. There are seven rules

ONE.   Every numerical input has a numerical output
TWO.   If you input 1x2, where x is any number,
       the guard outputs x
THREE. If the input x produces output y, then
       the input 3x produces the double of y;
       that is, the output is yy
FOUR.  If the input x produces output y, then
       the input 4x produces the reverse of y
FIVE.  If the input x produces output y, then
       the input 5x produces output y, but with
       the first digit removed
SIX.   If the input x produces output y, then
       the input 6x produces output 1y
SEVEN. If the input x produces output y, then
       the input 7x produces output 2y

@ol
1. Every numerical input has a numerical output.
1. $1 \; x \; 2 \mapsto x$
   so $1 \; 1984 \; 2 \mapsto 1984$
1. If $x \mapsto y$, then $3x \mapsto y$
   so $3 \; 119842 \mapsto 1984 \; 1984$
1. If $x \mapsto y$, then $4x \mapsto \overline{y}$
   so $4 \; 119842 \mapsto 4891$
1. If $x \mapsto y$, then $5x \mapsto y'$
   so $5 \; 119842 \mapsto 984$
1. If $x \mapsto y$, then $6x \mapsto 1y$
   so $6 \; 119842 \mapsto 1 \; 1984$
1. If $x \mapsto y$, then $7x \mapsto 2y$
   so $7 \; 119842 \mapsto 2 \; 1984$
@olend

(pause)

The guard will let you in, only if you can enter
an input x that produces the very same number x
as output.

In other words, you must construct a quine in
the language given by the rules.

If you want to try it, I will wait  for you
to pause the video. AS a spoiler alert, the
solution is forthcoming in

5
4
3
2
1

(extra pause)

[cls]
[north-west, very small - Rules again]

Consider the number k

[k=475364]

It has the property that, no matter what value
you give x, the input k1x2 produces output x1x2

[k1x2 \mapsto x1x2]

Why?

- Rule 2 says that 1x2 outputs x
- Which means that 4 followed by 1x2 produces
  the reverse of x
- and this 6 will append a 1
- then the 3 makes two copies
- the 5 erases the first 1
- which is replaced by a 2 thanks to the 7
- finally, this 4 reverts the whole string back
and we obtain the output x1x2 as claimed.

@ul[list-no-bullets]
- 1x2 \mapsto x
- 41x2 \mapsto xbar
- 641x2 \mapsto 1xbar
- 3641x2 \mapsto 1xbar1xbar
- 53641x2 \mapsto xbar1xbar
- 753641x2 \mapsto 2xbar1xbar
- 4753641x2 \mapsto x1x2
@ulend

Hopefully it is clear that there are many other
ways of achieving a similar replication effect.

Now, we wonder what happens when we feed the
very number k to this contraption.

Of course, letting x=k we find that

[k1k2 \mapsto k1k2]

the input k1k2 produces output k1k2

[$475364 \; 1 \; 475364 \; 2 \mapsto 475364 \; 1 \; 475364 \; 2]

and we have found one possible solution.

Notice that the numbers 1 and 2 act here as parentheses,
playing much the same role to the quotation marks in
my quine program.

In other words, the program  4 7 5 3 6 4  copies
the string 4 7 5 3 6 4 twice,  with appropriate formatting.
 
(small pause)

I suggested that there are other values of k
with the replicating property,

but once that you learned the basic trick,
it is not very challenging to find other
similar solutions.

Instead, it is time for you to get your hands
dirty, because once inside the convention,
every activity requires a new password.

Access to the round table requires an input x
that outputs the double of x

[@ul $x \mapsto xx$]

The buffet line asks for an input x that outputs
the reverse of x

[@ul $x \mapsto barx$]

To attend the poster session you must input
an x that outputs a different number y, which
in turn is used as input to obtain back x

[@ul $x \mapsto y \mapsto x$]

The restroom door requires an input x that outputs
a number y, which in turn outputs the reverse of x

[@ul $x \mapsto y \mapsto barx$]

(small pause)

And finally, if you wish to exit the building at
all, you will have to find an input x that outputs
a value y; then input the reverse of y to obtain
a doubled output zz. At last, if you then input a
single copy of z and get back the original x as
your output, you are free to go.

[@ul
 $x \mapsto y \quad
 bary \mapsto zz \quad
 z \mapsto x
]

(pause)

If you make it out of the building, please leave your
solutions in the comments section.

(pause)

[cls]





We are almost ready to begin talking about my mega fav number.


instead of numbers we could have used letters. For instance

[
1-L
2-R
...
]

L for left ...

so there is no need to interpret the numerical symbols as actual numbers.

But there is an application where we want to do that, and this brings us FINALLY! to my mega fav number.











Flourishes to add:

- Slowly change background colors, returning to the
initial color; then make a comment about circularity
- challenge to
  - make quines
  - solve Scherezade's problems
  - Find Godel's number
- ask for presentation feedback
- end with a quote about infinity and infinity ambigram, to mirror the initial "circular reasoning" circle